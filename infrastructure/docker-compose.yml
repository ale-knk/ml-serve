services:
  api:
    build:
      context: ..
      dockerfile: infrastructure/api/Dockerfile
    container_name: mlserve-api
    ports:
      - "${API_PORT}:8000"
    env_file:
      - ../.env
    depends_on:
      - postgres
    networks:
      - mlserve-network
    environment:
      - ENV=development
    command: >
      uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mlserve-network
    ports:
      - "${POSTGRES_PORT}:5432"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"

  minio:
    image: minio/minio
    container_name: mlserve-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ../.env
    volumes:
      - ../mlruns:/data
    networks:
      - mlserve-network

  minio-create-bucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb -p local/${MLFLOW_S3_BUCKET};
      mc policy set public local/${MLFLOW_S3_BUCKET};
      "
    env_file:
      - ../.env
    networks:
      - mlserve-network

  mlflow:
    build:
      context: ..
      dockerfile: infrastructure/mlflow/Dockerfile
    container_name: mlserve-mlflow
    ports:
      - "${MLFLOW_PORT}:5000"
    env_file:
      - ../.env
    depends_on:
      - postgres
      - minio-create-bucket
    volumes:
      - ../mlruns:/mlflow/mlruns
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?options=-csearch_path=${MLFLOW_BACKEND_SCHEMA}
      --default-artifact-root s3://${MLFLOW_S3_BUCKET}
      --host 0.0.0.0
      --port 5000

    networks:
      - mlserve-network

  training:
    build:
      context: ..
      dockerfile: infrastructure/train/Dockerfile

    container_name: mlserve-training
    command: >
      python -m training.train
    env_file:
      - ../.env
    depends_on:
      - mlflow
    networks:
      - mlserve-network

networks:
  mlserve-network:
    driver: bridge

volumes:
  pgdata:
